<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>OBJECT</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup views, set depth
event_inherited();
setup_views();
depth = DEPTH.menu;
target = CURSOR;
cameraSpeed = .1;   // percentage of the distance to the cursor covered per step
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// position the camera
var view    = VIEWS.combat;
var targetX = target.x;
var targetY = target.y;

var column  = getColumnFromXPrecise(x);
var row     = getRowFromYPrecise(y);

var isoX = getIsometricXFromCell(column, row);
var isoY = getIsometricYFromCell(column, row);


//ISOMETRIC
if (global.isometricView) {
    if (global.OPTIONS_INSTANT_CAMERA) {
        x = targetX;
        y = targetY;
    } else {
         var dist = point_distance(x, y, targetX, targetY);
         var spd  = delta(dist * cameraSpeed);
         move_towards_point(targetX, targetY, spd);
    }
    
    view_xview[view] = (isoX - global.GRID_OFFSET_X);
    view_yview[view] = (isoY - global.GRID_OFFSET_Y);
}
else {
    // CARTESIAN
    x = targetX;
    y = targetY;
    
    view_xview[view] = (x - global.GRID_OFFSET_X);
    view_yview[view] = (y - global.GRID_OFFSET_Y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the grid

if (global.isometricView == false)
{
    var offsetX = gridOffsetX -1;
    var offsetY = gridOffsetY -1;
    
    draw_set_color(c_black);
    var xMin = offsetX;
    var xMax = (offsetX + (gridWidth * tileWidth));
    var yMin = offsetY;
    var yMax = (offsetY + (gridHeight * tileHeight));
    
    
    for(var xx = 0; xx&lt;=gridWidth; xx++)
    {
        var xxx = (offsetX + (xx * tileWidth));
        draw_line(xxx, yMin, xxx, yMax);
        
        for(var yy = 0; yy&lt;=gridHeight; yy++)
        {
            var yyy = (offsetY + (yy * tileHeight));
            draw_line(xMin, yyy, xMax, yyy);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="46">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CHANGE VIEW
global.isometricView = !global.isometricView;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
