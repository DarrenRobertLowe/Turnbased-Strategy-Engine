<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>OBSTACLE</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// BASICALLY ANYTHING ON THE TURNLIST
event_inherited();

// setup
distanceToNextCell = 0;
takingDamage = false;
animTime = 0;
attackAnim = "";
targetIndex = 0;    // used for determining targets of attacks
waitTime = 0;       // used for adding a pause between actions
FALLING = false;
fallTime = 300;     // how long to fall before destroying self
casting = -1;       // the current spell being cast by this unit

// pathfinding
fullPathArray = array_create(0);
current_path_node = -1;
pathfinding_targX = -1;
pathfinding_targY = -1;
movementPoints    = 0;

// entity defaults
team            = "neutral"
weapon          = 0;
itemSlot1       = 0; // shield, off-hand, amulet, etc.
itemSlot2       = 0; // shield, off-hand, amulet, etc.
itemSlot3       = 0; // shield, off-hand, amulet, etc.
listOfTargets   = ds_list_create();
listOfCells     = ds_list_create(); // cells adjacent to targets
afflictions     = ds_list_create(); // can be ailments or buffs
traits          = ds_list_create(); // "Agile", "Opportunist", "Stalwart", etc
actions         = ds_list_create();
feats           = ds_list_create(); // unique unit skills
movedThisTurn   = false;
actedThisTurn   = false;
showOnTurnList  = true;
canDie          = true;
class           = classes.None;
name            = "Unnamed";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// remove from grid and turnlist

// remove from grid
if (ds_grid_get(occupiedGrid, column, row) == id) {
    ds_grid_set(occupiedGrid, column, row, global.gridDefaultValue);
}


if (object_index != FIRE) {
    show_message("aiiieeeeee!!!");
}

/* NOTE: endTurn() needs to be called before we
 * remove ourselves from the list, otherwise the
 * order gets messed up.
 */
// change the turn if it was our's
if (global.TURN == id) {
    endTurn();
}
// remove ourselves from the turnlist
var index = ds_list_find_index(global.TURNLIST, id);
if (index &gt; -1) then ds_list_delete(global.TURNLIST, index);

isBattleOver();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEATH Sequence (e.g. play audio)

instance_destroy(self, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PATHFINDING
movementPoints = move;
goto_square(targetColumn, targetRow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ANIMATION and MOVEMENT
event_inherited();
update_sprite();

// ANIMATE IF WALKING
if (global.isometricView) {
    animate();
}


// FALLING
if (FALLING) {
    image_xscale -= delta(.1);
    image_yscale -= delta(.01);
    z -= delta(1);
    if (image_xscale &lt; 0) then image_xscale = 0;
    if (image_yscale &lt; 0) then image_yscale = 0;
    waitTime = 100; // keep waiting while we fall
    fallTime--;
    if (fallTime &lt;= 0) {
        alarm[1] = 1;
    }
} else {

    if (waitTime &gt; 0) {
        waitTime--;
    }
    
    // MOVEMENT
    if (MOVING) {
        CAMERA.target = id;
        get_z();
        CURSOR.MODE = MODES.waiting;
        getCellFromCoordsPrecise(x, y);  // allows drawing of the sprite while in motion
        
        var finishedPath = false;
        show_debug_message("movementPoints : " + string(movementPoints));
        
        // FINISHED MOVING
        if (movementPoints &lt; 0) {
            finishedPath  = true;
            movedThisTurn = true;
            //current_path_node = array_height_2d(pathNodes);
            wait(global.delay_short);
        }
        
        var spd = delta(global.movementSpeed);
        
        if (!finishedPath) {//((current_path_node &lt; array_height_2d(pathNodes)) and (movementPoints &gt;= 0)) {
            show_debug_message("current_path_node: " +string(current_path_node) + "/" +string(array_height_2d(pathNodes)-1));
            // move towards the node
            walk_towards_point(pathfinding_targX, pathfinding_targY, spd);
            
            update_sprite();
            // check if we should clamp to the grid cell yet
            /*
            var dx = (pathfinding_targX - x);
            var dy = (pathfinding_targY - y);
            var dist = sqrt(dx*dx + dy*dy);
           
            
            if (dist &lt;= spd) {
                // if within 'spd' distance, clamp to target point
                x = pathfinding_targX;
                y = pathfinding_targY;
            } */ /*else {
            
                // otherwise, move towards target point
                x += (spd * dx / dist);
                y += (spd * dy / dist);
            }
            */
            
            // if node reached
            if ((x == pathfinding_targX) and (y == pathfinding_targY)) {
                pathfinding_next_node();
                if (current_path_node == array_height_2d(pathNodes)) then finishedPath = true; 
                movementPoints--;       // used by AI
            }
        } else {
            // clamp to goal
            //x = pathNodes[array_height_2d(pathNodes)-1, 0];
            //y = pathNodes[array_height_2d(pathNodes)-1, 1];
            var node = current_path_node-1;
            if (node &lt; 0) then node = 0;
            
            if (array_height_2d(pathNodes) &gt;= (node-1)) {
                x = pathNodes[node, 0];    // because AI will stop before the actual goal
                y = pathNodes[node, 1];    // because AI will stop before the actual goal
            }
            
            // finish path
            finishedPath = true;
            pathNodes = array_create(0); // clear the array
        }
        
        
        // Player controlled movement.
        if (finishedPath) {
            if !(object_is_ancestor(object_index, NPC)) {
                //update_direction();
                column = targetColumn;
                row = targetRow;
                CURSOR.MODE = MODES.free;               // return control to the cursor
                MOVING = false;
                updateGrid(id, sourceColumn, sourceRow, targetColumn, targetRow);   // empty old coords and add id to new position.
            }
        }
        
        
        // NPC movement
        // NOTE: This corresponds to moving a single cell
        // along the path, not the actual end of moving.
        // This is because the enemy just walks towards the
        // target, rather than choosing a square they can
        // actually reach. This should probably be changed.
        /*
        if (object_is_ancestor(object_index, NPC)) {
            if (path_position &gt;= 1) {
               //update_direction();
                getCellFromCoords(x,y);
                distanceToNextCell = 0;
                movementPoints--;
            }
        }*/
    }
}

// prevent occupation of mulitple grid cells that can happen on rare occasions
//snap_to_grid(column, row);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update xprev and yprev
xprev = xprevious;
yprev = yprevious;

if (waitTime &gt; 0) then waitTime--;



if (global.isometricView == false) {
    var pathLength = array_length_1d(fullPathArray);
    if (pathLength &gt; 0) { // if there's a path
        
        var prevNode = 0;
        // get the x and y coords of each node as an array
        for(var i=0; i&lt;pathLength; i++) {
            var node = fullPathArray[i]; 
            pathNodes[i, 0] = ds_map_find_value(node, "x");
            pathNodes[i, 1] = ds_map_find_value(node, "y");
            prevNode = i;
            
            var prevNodeX = pathNodes[prevNode, 0];
            var prevNodeY = pathNodes[prevNode, 1];
            var nodeX = pathNodes[i, 0];
            var nodeY = pathNodes[i, 1];
            
            draw_line_colour(prevNodeX, prevNodeY, nodeX, nodeY, c_red, c_red);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
