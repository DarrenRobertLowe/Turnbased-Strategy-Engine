<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>OBSTACLE</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// BASICALLY ANYTHING ON THE TURNLIST
event_inherited();

// setup
distanceToNextCell = 0;
takingDamage = false;
animTime = 0;
attackAnim = "";
targetIndex = 0;    // used for determining targets of attacks
waitTime = 0;       // used for adding a pause between actions


// entity defaults
team            = TEAMS.neutral;
listOfTargets   = ds_list_create();
listOfCells     = ds_list_create(); // cells adjacent to targets
ailments        = ds_list_create();
movedThisTurn   = false;
actedThisTurn   = false;
showOnTurnList  = true;
canDie          = true;
class           = classes.None;
name            = "Unnamed";
getBaseStats(classes.None);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// remove from grid and turnlist

// remove from grid
if (ds_grid_get(occupiedGrid, column, row) == id) {
    ds_grid_set(occupiedGrid, column, row, global.gridDefaultValue);
}


/* NOTE: endTurn() needs to be called before we
 * remove ourselves from the list.
 */
// change the turn if it was our's
if (global.TURN == id) {
    endTurn();
}
// remove ourselves from the turnlist
var index = ds_list_find_index(global.TURNLIST, id);
if (index &gt; -1) then ds_list_delete(global.TURNLIST, index);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEATH Sequence (e.g. play audio)

instance_destroy(self, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PATHFINDING
//MOVING = true;
goto_Square(targetColumn, targetRow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ANIMATION and MOVEMENT
event_inherited();

update_sprite();


// ANIMATE IF WALKING
if (global.isometricView) {
    animate();
}

if (waitTime &gt; 0) {
    waitTime--;
}


// MOVEMENT
if (global.PAUSED == false) {
    if (MOVING) {
        CAMERA.target = id;
        get_z();
        CURSOR.MODE = MODES.waiting;                // make cursor wait while we move
        getCellFromCoordsPrecise(x,y);
        
        
        // we'll probably want to replace this with a custom 
        // path movement that works for both the hero units
        // and the NPCs. Also see goto_Square()
        path_speed = delta(global.movementSpeed);   // if using delta time you probably need to update it here
        
        
        
        
        // Player controlled movement.
        if !(object_is_ancestor(object_index, NPC)) {
            if (path_position &gt;= 1) {
                update_direction();
                getCellFromCoords(x,y);
                CURSOR.MODE = MODES.free;              // return control to the cursor
                MOVING = false;
                updateGrid(id, sourceColumn, sourceRow, targetColumn, targetRow);   // empty old coords and add id to new position.
            }
        }
        
        
        // NPC movement
        // NOTE: This corresponds to moving a single cell
        // along the path, not the actual end of moving.
        // This is because the enemy just walks towards the
        // target, rather than choosing a square they can
        // actually reach. This should probably be changed.
        if (object_is_ancestor(object_index, NPC)) {
            if (path_position &gt;= 1) {
                update_direction();
                getCellFromCoords(x,y);
                distanceToNextCell = 0;
                movementPoints--;
                sout("moved a cell");
                //updateGrid(id, sourceColumn, sourceRow, targetColumn, targetRow);   // empty old coords and add id to new position.
            }
        }
    }
} else {
    path_speed = 0;
}

// prevent occupation of mulitple grid cells that can happen on rare occasions
snap_to_grid(column, row);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update xprev and yprev
xprev = xprevious;
yprev = yprevious;

if (waitTime &gt; 0) then waitTime--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
