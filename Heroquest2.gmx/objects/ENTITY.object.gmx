<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>OBJECT</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// OBJECTS THAT CAN BE PLACED ON THE GRID
event_inherited();

depth = DEPTHS.normal;

MOVING = false;

mySpeed = 4;
myPath  = path_add();

isoSprite = spr_none;
selectable = false;

column      = getColumnFromX(x);
row         = getRowFromY(y);
isoX        = getIsometricX(column, row);
isoY        = getIsometricY(column, row);


if (ds_grid_get(grid, column, row) == -1)
{
    ds_grid_set(grid, column, row, id);
}
else 
{
    show_error(
        "Grid cell already occupied! #
        Error: attempted to create object "+string(object_get_name(object_index))
        +", id:" + string(id)
        +" at position : " + string(column) + ":" +string(row)
        +"# but we encountered something there already!
        #value:" +string(ds_grid_get(grid, column, row)), true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// pathfinding
goto_Square(targetColumn, targetRow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ANIMATE IF WALKING

event_inherited();

set_sprite_animated();


// ANIMATE IF WALKING
if (path_position &lt; 1) {
    draw_path_ext();
    //depth = -((row*2) + column); // keeps depth correct but breaks animation wtf.
    if (image_index &lt; sprite_get_number(isoSprite)) {
        image_index += global.animationSpeed;//delta(animationSpeed);
        path_speed  = global.OPTIONS_MOVEMENT_SPEED;//delta(global.OPTIONS_MOVEMENT_SPEED);
    } else {
        image_index = 0;
    }
} else {
    image_index = 0; 
}


// MOVEMENT
if (MOVING) {
    CURSOR.MODE = MODES.waiting;                        // make cursor wait while we move
    getCellFromCoordsPrecise(x,y);                      // getCellFromCoordsPrecise(x, y);
    
    if (path_position &gt;= 1) {
        getCellFromCoords(x,y);
        CURSOR.MODE = MODES.free;                       // return control to the cursor
        MOVING = 0;                                     // turn off movement
        updateGrid(id, sourceColumn, sourceRow, targetColumn, targetRow);   // empty old coords and add id to new position.
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw path and animation
event_inherited();

// cartesian view
if !(global.isometricView)
{
    draw_self();
    
    // draw path
    draw_set_color(c_red);
    draw_path(myPath, x, y, true);
}
else // isometric view
{
    var index = 0;
    draw_sprite(isoSprite, index, getIsometricX(column, row), getIsometricY(column, row));
    
    if  (path_position &gt; 0)
    and (path_position &lt; 1)
    {
        // animate and update sprite position
        column = getColumnFromXPrecise(x);
        row = getRowFromYPrecise(y);
    }
}

/*
if !place_snapped(global.tileWidth, global.tileHeight)
{
    move_snap(global.tileWidth, global.tileHeight)
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
