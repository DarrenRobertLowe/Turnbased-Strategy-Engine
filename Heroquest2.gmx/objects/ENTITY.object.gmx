<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>OBSTACLE</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// BASICALLY ANYTHING ON THE TURNLIST
event_inherited();

team            = TEAMS.neutral;
listOfTargets   = ds_list_create();
listOfCells     = ds_list_create(); // cells adjacent to targets
ailments        = ds_list_create();
movedThisTurn   = false;
actedThisTurn   = false;

// set hp = hpBase, mp = mpBase, etc.
getBaseStats(0);

canDie      = true;


distanceToNextCell = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PATHFINDING
//MOVING = true;
goto_Square(targetColumn, targetRow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ANIMATE IF WALKING
event_inherited();

update_sprite();


// ANIMATE IF WALKING
if (global.isometricView)
{
    animate();
}


// MOVEMENT
if (MOVING) {
    CAMERA.target = id;
    get_z();
    CURSOR.MODE = MODES.waiting;                // make cursor wait while we move
    getCellFromCoordsPrecise(x,y);
    
    
    // we'll probably want to replace this with a custom 
    // path movement that works for both the hero units
    // and the NPCs. Also see goto_Square()
    path_speed = delta(global.movementSpeed);   // if using delta time you probably need to update it here
    
    
    // This is for player controlled movement.
    if !(object_is_ancestor(object_index, NPC)) {
        if (path_position &gt;= 1) {
            get_direction();
            getCellFromCoords(x,y);
            CURSOR.MODE = MODES.finishing;              // return control to the cursor
            MOVING = false;
            updateGrid(id, sourceColumn, sourceRow, targetColumn, targetRow);   // empty old coords and add id to new position.
        }
    }
    
    
    // This is for NPC movement, and corresponds to moving a 
    // single cell along a path, not the actual end of moving.
    if (object_is_ancestor(object_index, NPC)) {
        if (path_position &gt;= 1) {
            get_direction();
            getCellFromCoords(x,y);
            distanceToNextCell = 0;
            movementPoints--;
            //updateGrid(id, sourceColumn, sourceRow, targetColumn, targetRow);   // empty old coords and add id to new position.
        }
    }
}


// prevent occupation of mulitple grid cells that can happen on rare occasions
snap_to_grid(column, row);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update xprev and yprev
xprev = xprevious;
yprev = yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
