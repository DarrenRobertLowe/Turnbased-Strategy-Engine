<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup
view = VIEWS.combat;
turnAvatarScale = .5;
turnAvatarX = view_wview[view] + (sprite_get_width(avatars));
turnAvatarY = 125;
height = (view_hview[view] - turnAvatarY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the GUI

draw_reset();

//setup
var windowWidth  = window_get_width();
var windowHeight = window_get_height();
var avatarWidth  = sprite_get_width(avatars);



/// DRAW TURN LIST
// setup
turnAvatarX = (windowWidth - (sprite_get_width(avatars) * .3));   // view_wview[view];
var size = ds_list_size(global.TURNLIST);               // needs to be updated because units can be dropped from the list
var turnAvatarSeparation = (height / size);
var current = ds_list_find_value(global.TURNLIST,0);


// draw the avatars and circles
for(var i=(size-1); i &gt; -1; i--) {
    var unit = ds_list_find_value(global.TURNLIST, i);
    
    if (unit &gt; 0) {
        var spr;
        if (unit.team == TEAMS.ally)    then spr = 0;
        if (unit.team == TEAMS.enemy)   then spr = 1;
        if (unit.team == TEAMS.neutral) then spr = 2;
        
        var alpha = (1 - ((i/size)*.5));
        var horizontalSeparation = 10*(logn(1.5,i+1));
        // size * 1/size
        // size * 1/size
        
        // draw the avatar background
        draw_sprite_ext(
            avatar_bg,
            spr,
            (turnAvatarX - 70) + (horizontalSeparation),
            turnAvatarY + (turnAvatarSeparation*i),
            turnAvatarScale,
            turnAvatarScale,
            0, c_white,
            (alpha * .8)
        );
        
        // draw the avatar
        draw_sprite_ext(
            avatars,
            unit.avatar,
            (turnAvatarX - 70) + (horizontalSeparation),
            turnAvatarY + (turnAvatarSeparation*i),
            turnAvatarScale,
            turnAvatarScale,
            0, c_white,
            alpha
        );
    }
}


// draw the "ORDER" text
var orderString = "ORDER";
var orderX = windowWidth - (string_width(orderString)*3);

draw_text_outlined(orderX, 25, orderString, c_black, c_yellow, global.header_font);
// draw the bar under the order text
draw_set_color(c_yellow);
draw_rectangle(orderX, 56, windowWidth, 59, false);
draw_set_color(c_black);
draw_rectangle(orderX, 56, windowWidth, 59, true);





/// DRAW THE CHARACTER INFO
// draw the panel
var panelY = (windowHeight - sprite_get_height(spr_combat_panel));
draw_sprite(spr_combat_panel, 0, 154, panelY);

// draw the avatar
var unit = ds_list_find_value(global.TURNLIST, 0);
draw_sprite_ext(avatars, unit.avatar, 0+(avatarWidth*.5), windowHeight - (avatarWidth*.5), -1, 1, 0, c_white, 1);

// draw the name
// note: see setup_fonts()
var hero = ds_list_find_value(global.TURNLIST, 0);
var nameColour = c_white;
var outlineColour = c_black;

draw_set_valign(fa_middle); // draw in the middle so it is half-in the background area
draw_text_outlined(avatarWidth, panelY, hero.name, outlineColour, nameColour, global.header_font);
draw_set_valign(fa_top);    // return to default


// reset drawing
//draw_reset();

// draw the stats
var column1 = avatarWidth + 10;
var lineSeparation = 25;
//draw_set_font(global.menu_font);
draw_text_outlined(column1, panelY + lineSeparation, "HP: " + string(hero.hp) + "/" + string(hero.hpBase),c_black,c_white,global.menu_font);
//draw_text(panelY + lineSeparation);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
